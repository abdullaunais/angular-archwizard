{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng://angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng://angular-archwizard/lib/util/wizard-step.interface.ts","ng://angular-archwizard/lib/util/moving-direction.enum.ts","ng://angular-archwizard/lib/navigation/navigation-mode.interface.ts","ng://angular-archwizard/lib/navigation/free-navigation-mode.ts","ng://angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng://angular-archwizard/lib/navigation/semi-strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/navigation-mode.provider.ts","ng://angular-archwizard/lib/navigation/wizard-state.model.ts","ng://angular-archwizard/lib/components/wizard.component.ts","ng://angular-archwizard/lib/components/wizard-completion-step.component.ts","ng://angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng://angular-archwizard/lib/components/wizard-step.component.ts","ng://angular-archwizard/lib/directives/enable-back-links.directive.ts","ng://angular-archwizard/lib/util/step-offset.interface.ts","ng://angular-archwizard/lib/util/step-id.interface.ts","ng://angular-archwizard/lib/util/step-index.interface.ts","ng://angular-archwizard/lib/directives/go-to-step.directive.ts","ng://angular-archwizard/lib/directives/next-step.directive.ts","ng://angular-archwizard/lib/directives/optional-step.directive.ts","ng://angular-archwizard/lib/directives/previous-step.directive.ts","ng://angular-archwizard/lib/directives/reset-wizard.directive.ts","ng://angular-archwizard/lib/directives/selected-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-step.directive.ts","ng://angular-archwizard/lib/archwizard.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","WizardStepTitleDirective","templateRef","Directive","args","selector","TemplateRef","WizardStepSymbolDirective","WizardStep","navigationSymbol","symbol","completed","selected","defaultSelected","optional","canEnter","canExit","stepEnter","EventEmitter","stepExit","defineProperty","canTransitionStep","condition","direction","Promise","resolve","Function","reject","Error","enter","emit","exit","canEnterStep","canExitStep","ContentChild","Input","Output","HostBinding","Forwards","Backwards","Stay","NavigationMode","wizardState","goToPreviousStep","preFinalize","postFinalize","hasPreviousStep","goToStep","currentStepIndex","goToNextStep","hasNextStep","FreeNavigationMode","_super","call","tslib_1.__extends","canGoToStep","destinationIndex","_this","hasStep","movingDirection","getMovingDirection","then","previous","currentStep","getStepAtIndex","navigationAllowed","MovingDirection","isNavigable","reset","defaultStepIndex","wizardSteps","forEach","step","WizardCompletionStep","apply","arguments","SemiStrictNavigationMode","allNormalStepsCompleted","filter","index","every","length","StrictNavigationMode","some","navigationModeFactory","navigationMode","WizardState","_defaultStepIndex","foundDefaultStep","find","getIndexOfStep","updateNavigationMode","updatedNavigationMode","updateWizardSteps","updatedWizardSteps","indexOf","stepIndex","isLastStep","getIndexOfStepWithId","stepId","findIndex","destinationStep","Injectable","WizardComponent","model","navBarLocation","navBarLayout","navBarDirection","disableNavigationBar","ngOnChanges","changes","_b","__values","o","m","Symbol","iterator","i","next","value","done","tslib_1.__values","keys","_c","propName","change","firstChange","parseInt","currentValue","ngAfterContentInit","subscribe","changedWizardSteps","toArray","navigation","Component","template","encapsulation","ViewEncapsulation","None","providers","ContentChildren","WizardCompletionStepComponent","provide","useExisting","forwardRef","WizardNavigationBarComponent","slice","reverse","isCurrent","wizardStep","isDone","isDefault","isEditing","isOptional","WizardStepComponent","EnableBackLinksDirective","completionStep","ngOnInit","decorators","type","Host","isStepOffset","isStepId","isStepIndex","GoToStepDirective","emitter","targetStep","stepOffset","onClick","event","Optional","HostListener","NextStepDirective","OptionalStepDirective","PreviousStepDirective","ResetWizardDirective","finalize","SelectedStepDirective","WizardCompletionStepDirective","WizardStepDirective","ArchwizardModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * Created by marc on 01.06.17.\r\n */\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\r\n * to define the content of a step title inside the navigation bar.\r\n * This step title can be freely created and can contain more than only plain text\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <ng-template awWizardStepTitle>\r\n *     ...\r\n * </ng-template>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\r\n})\r\nexport class WizardStepTitleDirective {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\r\n   */\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n","import {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\r\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <ng-template awWizardStepSymbol>\r\n *     ...\r\n * </ng-template>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\r\n})\r\nexport class WizardStepSymbolDirective {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\r\n   */\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n","import {MovingDirection} from './moving-direction.enum';\r\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\r\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\r\nimport {NavigationSymbol} from './navigation-symbol.interface';\r\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\r\n\r\n/**\r\n * Basic functionality every type of wizard step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardStep {\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is then shown inside the navigation bar.\r\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\r\n   */\r\n  @ContentChild(WizardStepTitleDirective)\r\n  public stepTitleTemplate: WizardStepTitleDirective;\r\n\r\n  /**\r\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\r\n   * Allows to display arbitrary content as a step symbol instead of plain text.\r\n   */\r\n  @ContentChild(WizardStepSymbolDirective)\r\n  public stepSymbolTemplate: WizardStepSymbolDirective;\r\n\r\n  /**\r\n   * A step id, unique to the step\r\n   */\r\n  @Input()\r\n  public stepId: string;\r\n\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\r\n   */\r\n  @Input()\r\n  public stepTitle: string;\r\n\r\n  /**\r\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\r\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\r\n   */\r\n  @Input()\r\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\r\n\r\n  /**\r\n   * A boolean describing if the wizard step has been completed\r\n   */\r\n  public completed = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is currently selected\r\n   */\r\n  public selected = false;\r\n\r\n  /**\r\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\r\n   */\r\n  public defaultSelected = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is an optional step\r\n   */\r\n  public optional = false;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be entered\r\n   */\r\n  @Input()\r\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be exited\r\n   */\r\n  @Input()\r\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is entered.\r\n   * The bound method should be used to do initialization work.\r\n   */\r\n  @Output()\r\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Returns if this wizard step should be visible to the user.\r\n   * If the step should be visible to the user false is returned, otherwise true\r\n   */\r\n  @HostBinding('hidden')\r\n  public get hidden(): boolean {\r\n    return !this.selected;\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be transitioned with a given direction.\r\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\r\n   *\r\n   * @param condition A condition variable, deciding if the step can be transitioned\r\n   * @param direction The direction in which this step should be transitioned\r\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\r\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\r\n   */\r\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\r\n                                     ((direction: MovingDirection) => Promise<boolean>) |\r\n                                     boolean,\r\n                                   direction: MovingDirection): Promise<boolean> {\r\n    if (typeof(condition) === typeof(true)) {\r\n      return Promise.resolve(condition as boolean);\r\n    } else if (condition instanceof Function) {\r\n      return Promise.resolve(condition(direction));\r\n    } else {\r\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is entered\r\n   *\r\n   * @param direction The direction in which the step is entered\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is exited\r\n   *\r\n   * @param direction The direction in which the step is exited\r\n   */\r\n  public exit(direction: MovingDirection) {\r\n    this.stepExit.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be entered from the given direction.\r\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be entered\r\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\r\n   */\r\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canEnter, direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be exited into given direction.\r\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be left\r\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\r\n   */\r\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canExit, direction);\r\n  }\r\n}\r\n","/**\r\n * The direction in which a step transition was made\r\n *\r\n * @author Marc Arndt\r\n */\r\n\r\n/**\r\n * This enum contains the different possible moving directions in which a wizard can be traversed\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport enum MovingDirection {\r\n  /**\r\n   * A forward step transition\r\n   */\r\n  Forwards,\r\n  /**\r\n   * A backward step transition\r\n   */\r\n  Backwards,\r\n  /**\r\n   * No step transition was done\r\n   */\r\n  Stay\r\n}\r\n","import {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * An interface describing the basic functionality, which must be provided by a navigation mode.\r\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class NavigationMode {\r\n  constructor(protected wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\r\n   */\r\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\r\n\r\n  /**\r\n   * Tries to transition to the wizard step, as denoted by the given destination index.\r\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\r\n\r\n  /**\r\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns True if the step can be navigated to, false otherwise\r\n   */\r\n  abstract isNavigable(destinationIndex: number): boolean;\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  abstract reset(): void;\r\n\r\n  /**\r\n   * Tries to transition the wizard to the previous step from the `currentStep`\r\n   */\r\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasPreviousStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to transition the wizard to the next step from the `currentStep`\r\n   */\r\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasNextStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\r\n * as long as the current step can be exited in the given direction\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class FreeNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {WizardStep} from './wizard-step.interface';\r\nimport {MovingDirection} from './moving-direction.enum';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * Basic functionality every wizard completion step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardCompletionStep extends WizardStep {\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.completed = true;\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public exit(direction: MovingDirection): void {\r\n    // set this completion step as incomplete\r\n    this.completed = false;\r\n    this.stepExit.emit(direction);\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class SemiStrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\r\n    const destinationStep = (previous: boolean) => {\r\n      if (previous) {\r\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex)\r\n          .every(step => step.completed || step.optional || step.selected);\r\n\r\n        return Promise.resolve(\r\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(destinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  isNavigable(destinationIndex: number): boolean {\r\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\r\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\r\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\r\n        .every(step => step.completed || step.optional || step.selected);\r\n    } else {\r\n      // a \"normal\" step can always be entered\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // the default step is a completion step and the wizard contains more than one step\r\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\r\n      this.wizardState.wizardSteps.length !== 1;\r\n\r\n    if (defaultCompletionStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - all previous steps to the destination step have been completed or are optional\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class StrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all previous steps to the destination step have been completed or are optional\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const allPreviousStepsComplete = (previous: boolean) => {\r\n      if (previous) {\r\n        return Promise.resolve(this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\r\n          .every(step => step.completed || step.optional)\r\n        );\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(allPreviousStepsComplete);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - all steps between the old current step and the destination step are marked as incomplete\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        // set all steps after the destination step to incomplete\r\n        this.wizardState.wizardSteps\r\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\r\n          .forEach(step => step.completed = false);\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\r\n    return destinationIndex < this.wizardState.currentStepIndex;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // at least one step is before the default step, that is not optional\r\n    const illegalDefaultStep = this.wizardState.wizardSteps\r\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\r\n      .some(step => !step.optional);\r\n\r\n    if (illegalDefaultStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {FreeNavigationMode} from './free-navigation-mode';\r\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\r\nimport {StrictNavigationMode} from './strict-navigation-mode';\r\n\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {WizardState} from './wizard-state.model';\r\n\r\n/**\r\n * A factory method used to create [[NavigationMode]] instances\r\n *\r\n * @param navigationMode The name of the to be used navigation mode\r\n * @param wizardState The wizard state of the wizard\r\n * @returns The created [[NavigationMode]]\r\n */\r\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\r\n  switch (navigationMode) {\r\n    case 'free':\r\n      return new FreeNavigationMode(wizardState);\r\n    case 'semi-strict':\r\n      return new SemiStrictNavigationMode(wizardState);\r\n    case 'strict':\r\n    default:\r\n      return new StrictNavigationMode(wizardState);\r\n  }\r\n};\r\n","import {Injectable} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {navigationModeFactory} from './navigation-mode.provider';\r\n\r\n/**\r\n * The internal model/state of a wizard.\r\n * This model contains:\r\n * - an array with all steps the wizard contains\r\n * - the index of the step the wizard currently resides inside\r\n * - information about the completeness of the wizard\r\n * - some additional helper methods\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Injectable()\r\nexport class WizardState {\r\n  /**\r\n   * The initial step index, as taken from the [[WizardComponent]]\r\n   */\r\n  private _defaultStepIndex = 0;\r\n\r\n  /**\r\n   * An array representation of all wizard steps belonging to this model\r\n   */\r\n  public wizardSteps: Array<WizardStep> = [];\r\n\r\n  /**\r\n   * Sets the initial default step.\r\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\r\n   *\r\n   * @param defaultStepIndex The new default wizard step index\r\n   */\r\n  public set defaultStepIndex(defaultStepIndex) {\r\n    this._defaultStepIndex = defaultStepIndex;\r\n  }\r\n\r\n  /**\r\n   * The initial step index.\r\n   * This value can be either:\r\n   * - the index of a wizard step with a `selected` directive, or\r\n   * - the default step index, set in the [[WizardComponent]]\r\n   */\r\n  public get defaultStepIndex(): number {\r\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\r\n\r\n    if (foundDefaultStep) {\r\n      return this.getIndexOfStep(foundDefaultStep);\r\n    } else {\r\n      return this._defaultStepIndex;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\r\n   * If this wizard contains no steps, currentStepIndex is -1\r\n   */\r\n  public currentStepIndex = -1;\r\n\r\n  /**\r\n   * The navigation mode used to navigate inside the wizard\r\n   */\r\n  public navigationMode: NavigationMode;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  public disableNavigationBar: boolean;\r\n\r\n  /**\r\n   * The WizardStep object belonging to the currently visible and selected step.\r\n   * The currentStep is always the currently selected wizard step.\r\n   * The currentStep can be either completed, if it was visited earlier,\r\n   * or not completed, if it is visited for the first time or its state is currently out of date.\r\n   *\r\n   * If this wizard contains no steps, currentStep is null\r\n   */\r\n  public get currentStep(): WizardStep {\r\n    if (this.hasStep(this.currentStepIndex)) {\r\n      return this.wizardSteps[this.currentStepIndex];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The completeness of the wizard.\r\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\r\n   */\r\n  public get completed(): boolean {\r\n    return this.wizardSteps.every(step => step.completed || step.optional);\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * Updates the navigation mode to the navigation mode with the given name\r\n   *\r\n   * @param updatedNavigationMode The name of the new navigation mode\r\n   */\r\n  updateNavigationMode(updatedNavigationMode: string): void {\r\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the wizard steps to the new array\r\n   *\r\n   * @param updatedWizardSteps The updated wizard steps\r\n   */\r\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\r\n    // the wizard is currently not in the initialization phase\r\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\r\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\r\n    }\r\n\r\n    this.wizardSteps = updatedWizardSteps;\r\n  }\r\n\r\n  /**\r\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\r\n   *\r\n   * @param stepIndex The to be checked index of a step inside this wizard\r\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\r\n   */\r\n  hasStep(stepIndex: number): boolean {\r\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a previous step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a previous step before the current step\r\n   */\r\n  hasPreviousStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a next step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a next step after the current step\r\n   */\r\n  hasNextStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard is currently inside its last step\r\n   *\r\n   * @returns True if the wizard is currently inside its last step\r\n   */\r\n  isLastStep(): boolean {\r\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\r\n   * If no [[WizardStep]] exists at the given index an Error is thrown\r\n   *\r\n   * @param stepIndex The given index\r\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\r\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\r\n   */\r\n  getStepAtIndex(stepIndex: number): WizardStep {\r\n    if (!this.hasStep(stepIndex)) {\r\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\r\n    }\r\n\r\n    return this.wizardSteps[stepIndex];\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the step with the given `stepId`.\r\n   * If no step with the given `stepId` exists, `-1` is returned\r\n   *\r\n   * @param stepId The given step id\r\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\r\n   */\r\n  getIndexOfStepWithId(stepId: string): number {\r\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the given [[WizardStep]] `step`.\r\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\r\n   *\r\n   * @param step The given [[WizardStep]]\r\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\r\n   */\r\n  getIndexOfStep(step: WizardStep): number {\r\n    return this.wizardSteps.indexOf(step);\r\n  }\r\n\r\n  /**\r\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\r\n   *\r\n   * @param destinationStep The given destination step\r\n   * @returns The calculated [[MovingDirection]]\r\n   */\r\n  getMovingDirection(destinationStep: number): MovingDirection {\r\n    let movingDirection: MovingDirection;\r\n\r\n    if (destinationStep > this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Forwards;\r\n    } else if (destinationStep < this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Backwards;\r\n    } else {\r\n      movingDirection = MovingDirection.Stay;\r\n    }\r\n\r\n    return movingDirection;\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard` component defines the root component of a wizard.\r\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\r\n * of its navigation bar.\r\n *\r\n * ### Syntax\r\n * ```html\r\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\r\n *     ...\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * Without completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * With completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard',\r\n  templateUrl: 'wizard.component.html',\r\n  styleUrls: ['wizard.component.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [WizardState]\r\n})\r\nexport class WizardComponent implements OnChanges, AfterContentInit {\r\n  /**\r\n   * A QueryList containing all [[WizardStep]]s inside this wizard\r\n   */\r\n  @ContentChildren(WizardStep)\r\n  public wizardSteps: QueryList<WizardStep>;\r\n\r\n  /**\r\n   * The location of the navigation bar inside the wizard.\r\n   * This location can be either top, bottom, left or right\r\n   */\r\n  @Input()\r\n  public navBarLocation = 'top';\r\n\r\n  /**\r\n   * The layout of the navigation bar inside the wizard.\r\n   * The layout can be either small, large-filled, large-empty or large-symbols\r\n   */\r\n  @Input()\r\n  public navBarLayout = 'small';\r\n\r\n  /**\r\n   * The direction in which the steps inside the navigation bar should be shown.\r\n   * The direction can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public navBarDirection = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode used for transitioning between different steps.\r\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\r\n   */\r\n  @Input()\r\n  public navigationMode = 'strict';\r\n\r\n  /**\r\n   * The initially selected step, represented by its index\r\n   */\r\n  @Input()\r\n  public defaultStepIndex = 0;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  @Input()\r\n  public disableNavigationBar = false;\r\n\r\n  /**\r\n   * Returns true if this wizard uses a horizontal orientation.\r\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\r\n   *\r\n   * @returns True if this wizard uses a horizontal orientation\r\n   */\r\n  @HostBinding('class.horizontal')\r\n  public get horizontalOrientation(): boolean {\r\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\r\n  }\r\n\r\n  /**\r\n   * Returns true if this wizard uses a vertical orientation.\r\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\r\n   *\r\n   * @returns True if this wizard uses a vertical orientation\r\n   */\r\n  @HostBinding('class.vertical')\r\n  public get verticalOrientation(): boolean {\r\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\r\n  }\r\n\r\n  /**\r\n   * The navigation mode for this wizard\r\n   */\r\n  public get navigation(): NavigationMode {\r\n    return this.model.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param model The model for this wizard component\r\n   */\r\n  constructor(public model: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Updates the model after certain input values have changed\r\n   *\r\n   * @param changes The detected changes\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (const propName of Object.keys(changes)) {\r\n      let change = changes[propName];\r\n\r\n      if (!change.firstChange) {\r\n        switch (propName) {\r\n          case 'defaultStepIndex':\r\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\r\n            break;\r\n          case 'disableNavigationBar':\r\n            this.model.disableNavigationBar = change.currentValue;\r\n            break;\r\n          case 'navigationMode':\r\n            this.model.updateNavigationMode(change.currentValue);\r\n            break;\r\n          /* istanbul ignore next */\r\n          default:\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngAfterContentInit(): void {\r\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\r\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\r\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\r\n    });\r\n\r\n    // initialize the model\r\n    this.model.disableNavigationBar = this.disableNavigationBar;\r\n    this.model.defaultStepIndex = this.defaultStepIndex;\r\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\r\n    this.model.updateNavigationMode(this.navigationMode);\r\n\r\n    // finally reset the whole wizard state\r\n    this.navigation.reset();\r\n  }\r\n}\r\n","/**\r\n * Created by marc on 20.05.17.\r\n */\r\n\r\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\r\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-completion-step',\r\n  templateUrl: 'wizard-completion-step.component.html',\r\n  styleUrls: ['wizard-completion-step.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\r\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\r\n  ]\r\n})\r\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\r\n}\r\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\r\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\r\n * otherwise it will look like a normal `ul` component.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-navigation-bar',\r\n  templateUrl: 'wizard-navigation-bar.component.html',\r\n  styleUrls: ['wizard-navigation-bar.component.horizontal.less', 'wizard-navigation-bar.component.vertical.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class WizardNavigationBarComponent {\r\n  /**\r\n   * The direction in which the wizard steps should be shown in the navigation bar.\r\n   * This value can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public direction = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  public get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state the wizard currently resides in\r\n   */\r\n  constructor(public wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Returns all [[WizardStep]]s contained in the wizard\r\n   *\r\n   * @returns An array containing all [[WizardStep]]s\r\n   */\r\n  get wizardSteps(): Array<WizardStep> {\r\n    switch (this.direction) {\r\n      case 'right-to-left':\r\n        return this.wizardState.wizardSteps.slice().reverse();\r\n      case 'left-to-right':\r\n      default:\r\n        return this.wizardState.wizardSteps;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\r\n   *\r\n   * @returns The number of wizard steps to be displayed\r\n   */\r\n  get numberOfWizardSteps(): number {\r\n    return this.wizardState.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as current\r\n   */\r\n  public isCurrent(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as done\r\n   */\r\n  public isDone(wizardStep: WizardStep): boolean {\r\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as default\r\n   */\r\n  public isDefault(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as editing\r\n   */\r\n  public isEditing(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as optional\r\n   */\r\n  public isOptional(wizardStep: WizardStep): boolean {\r\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\r\n   * A wizard step can be navigated to if:\r\n   * - the step is currently not selected\r\n   * - the navigation bar isn't disabled\r\n   * - the navigation mode allows navigation to the step\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as navigable\r\n   */\r\n  public isNavigable(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\r\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\r\n  }\r\n}\r\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <aw-wizard-step\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        symbol\r\n *    </ng-template>\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <aw-wizard-step>\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        <i class=\"fa fa-taxi\"></i>\r\n *    </ng-template>\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-step',\r\n  templateUrl: 'wizard-step.component.html',\r\n  styleUrls: ['wizard-step.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\r\n  ]\r\n})\r\nexport class WizardStepComponent extends WizardStep {\r\n}\r\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awEnableBackLinks]'\r\n})\r\nexport class EnableBackLinksDirective implements OnInit {\r\n  /**\r\n   * This EventEmitter is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param completionStep The wizard completion step, which should be exitable\r\n   */\r\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.completionStep.canExit = true;\r\n    this.completionStep.stepExit = this.stepExit;\r\n  }\r\n}\r\n","/**\r\n * An offset between two steps.\r\n * This offset can be either positive or negative.\r\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\r\n * that the offset step is ahead of the other step.\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepOffset {\r\n  /**\r\n   * The offset to the destination step\r\n   */\r\n  stepOffset: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepOffset]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepOffset]] and false otherwise\r\n */\r\nexport function isStepOffset(value: any): value is StepOffset {\r\n  return value.hasOwnProperty('stepOffset');\r\n}\r\n","import {WizardStep} from './wizard-step.interface';\r\n\r\n/**\r\n * An unique identifier of a wizard step\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepId {\r\n  /**\r\n   * The id of the destination step\r\n   */\r\n  stepId: string\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepId]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepId]] and false otherwise\r\n */\r\nexport function isStepId(value: any): value is StepId {\r\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\r\n}\r\n","/**\r\n * An index of a wizard step.\r\n * This index is the index of the step inside the wizard.\r\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepIndex {\r\n  /**\r\n   * The index of the destination step\r\n   */\r\n  stepIndex: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepIndex]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepIndex]] and false otherwise\r\n */\r\nexport function isStepIndex(value: any): value is StepIndex {\r\n  return value.hasOwnProperty('stepIndex');\r\n}\r\n","/**\r\n * Created by marc on 09.01.17.\r\n */\r\n\r\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\r\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {isStepId, StepId} from '../util/step-id.interface';\r\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\r\n\r\n/**\r\n * The `awGoToStep` directive can be used to navigate to a given step.\r\n * This step can be defined in one of multiple formats\r\n *\r\n * ### Syntax\r\n *\r\n * With absolute step index:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With unique step id:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With a wizard step object:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With an offset to the defining step:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awGoToStep]'\r\n})\r\nexport class GoToStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\r\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\r\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\r\n   * or a step index as a number or string\r\n   */\r\n    // tslint:disable-next-line:no-input-rename\r\n  @Input('awGoToStep')\r\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\r\n   */\r\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Returns the destination step of this directive as an absolute step index inside the wizard\r\n   *\r\n   * @returns The index of the destination step\r\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\r\n   */\r\n  get destinationStep(): number {\r\n    let destinationStep: number;\r\n\r\n    if (isStepIndex(this.targetStep)) {\r\n      destinationStep = this.targetStep.stepIndex;\r\n    } else if (isStepId(this.targetStep)) {\r\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\r\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\r\n    } else if (this.targetStep instanceof WizardStep) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\r\n    } else {\r\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\r\n    }\r\n\r\n    return destinationStep;\r\n  }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the `destinationStep`\r\n   */\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: Event): void {\r\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awNextStep` directive can be used to navigate to the next step.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awNextStep (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awNextStep]'\r\n})\r\nexport class NextStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the next step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\r\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awOptionalStep]'\r\n})\r\nexport class OptionalStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.optional = true;\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awPreviousStep` directive can be used to navigate to the previous step.\r\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awPreviousStep>...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awPreviousStep]'\r\n})\r\nexport class PreviousStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the previous step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\r\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awResetWizard]'\r\n})\r\nexport class ResetWizardDirective {\r\n  /**\r\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\r\n   */\r\n  @Output()\r\n  public finalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Resets the wizard\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    // do some optional cleanup work\r\n    this.finalize.emit();\r\n    // reset the wizard to its initial state\r\n    this.navigationMode.reset();\r\n  }\r\n}\r\n","import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awSelectedStep]'\r\n})\r\nexport class SelectedStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which should be selected by default\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.defaultSelected = true;\r\n  }\r\n}\r\n","import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\r\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardCompletionStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\r\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\r\n  ]\r\n})\r\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\r\n}\r\n","import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        symbol\r\n *    </ng-template>\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <div awWizardStep>\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        <i class=\"fa fa-taxi\"></i>\r\n *    </ng-template>\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\r\n  ]\r\n})\r\nexport class WizardStepDirective extends WizardStep {\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\n\r\nimport {WizardComponent} from './components/wizard.component';\r\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\r\nimport {WizardStepComponent} from './components/wizard-step.component';\r\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\r\n\r\nimport {NextStepDirective} from './directives/next-step.directive';\r\nimport {PreviousStepDirective} from './directives/previous-step.directive';\r\nimport {OptionalStepDirective} from './directives/optional-step.directive';\r\nimport {GoToStepDirective} from './directives/go-to-step.directive';\r\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\r\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\r\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\r\nimport {WizardStepDirective} from './directives/wizard-step.directive';\r\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\r\nimport {SelectedStepDirective} from './directives/selected-step.directive';\r\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\r\n\r\n/**\r\n * The module defining all the content inside `angular-archwizard`\r\n *\r\n * @author Marc Arndt\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepSymbolDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepSymbolDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ]\r\n})\r\nexport class ArchwizardModule {\r\n  /* istanbul ignore next */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: ArchwizardModule, providers: []};\r\n  }\r\n}\r\n"]}