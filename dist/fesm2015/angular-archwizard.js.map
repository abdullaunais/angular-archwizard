{"version":3,"file":"angular-archwizard.js.map","sources":["ng://angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng://angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng://angular-archwizard/lib/util/wizard-step.interface.ts","ng://angular-archwizard/lib/util/moving-direction.enum.ts","ng://angular-archwizard/lib/navigation/navigation-mode.interface.ts","ng://angular-archwizard/lib/navigation/free-navigation-mode.ts","ng://angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng://angular-archwizard/lib/navigation/semi-strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/navigation-mode.provider.ts","ng://angular-archwizard/lib/navigation/wizard-state.model.ts","ng://angular-archwizard/lib/components/wizard.component.ts","ng://angular-archwizard/lib/components/wizard-completion-step.component.ts","ng://angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng://angular-archwizard/lib/components/wizard-step.component.ts","ng://angular-archwizard/lib/directives/enable-back-links.directive.ts","ng://angular-archwizard/lib/util/step-offset.interface.ts","ng://angular-archwizard/lib/util/step-id.interface.ts","ng://angular-archwizard/lib/util/step-index.interface.ts","ng://angular-archwizard/lib/directives/go-to-step.directive.ts","ng://angular-archwizard/lib/directives/next-step.directive.ts","ng://angular-archwizard/lib/directives/optional-step.directive.ts","ng://angular-archwizard/lib/directives/previous-step.directive.ts","ng://angular-archwizard/lib/directives/reset-wizard.directive.ts","ng://angular-archwizard/lib/directives/selected-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-step.directive.ts","ng://angular-archwizard/lib/archwizard.module.ts"],"sourcesContent":["/**\r\n * Created by marc on 01.06.17.\r\n */\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\r\n * to define the content of a step title inside the navigation bar.\r\n * This step title can be freely created and can contain more than only plain text\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <ng-template awWizardStepTitle>\r\n *     ...\r\n * </ng-template>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\r\n})\r\nexport class WizardStepTitleDirective {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\r\n   */\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n","import {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\r\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <ng-template awWizardStepSymbol>\r\n *     ...\r\n * </ng-template>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\r\n})\r\nexport class WizardStepSymbolDirective {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\r\n   */\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n","import {MovingDirection} from './moving-direction.enum';\r\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\r\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\r\nimport {NavigationSymbol} from './navigation-symbol.interface';\r\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\r\n\r\n/**\r\n * Basic functionality every type of wizard step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardStep {\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is then shown inside the navigation bar.\r\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\r\n   */\r\n  @ContentChild(WizardStepTitleDirective)\r\n  public stepTitleTemplate: WizardStepTitleDirective;\r\n\r\n  /**\r\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\r\n   * Allows to display arbitrary content as a step symbol instead of plain text.\r\n   */\r\n  @ContentChild(WizardStepSymbolDirective)\r\n  public stepSymbolTemplate: WizardStepSymbolDirective;\r\n\r\n  /**\r\n   * A step id, unique to the step\r\n   */\r\n  @Input()\r\n  public stepId: string;\r\n\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\r\n   */\r\n  @Input()\r\n  public stepTitle: string;\r\n\r\n  /**\r\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\r\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\r\n   */\r\n  @Input()\r\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\r\n\r\n  /**\r\n   * A boolean describing if the wizard step has been completed\r\n   */\r\n  public completed = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is currently selected\r\n   */\r\n  public selected = false;\r\n\r\n  /**\r\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\r\n   */\r\n  public defaultSelected = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is an optional step\r\n   */\r\n  public optional = false;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be entered\r\n   */\r\n  @Input()\r\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be exited\r\n   */\r\n  @Input()\r\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is entered.\r\n   * The bound method should be used to do initialization work.\r\n   */\r\n  @Output()\r\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Returns if this wizard step should be visible to the user.\r\n   * If the step should be visible to the user false is returned, otherwise true\r\n   */\r\n  @HostBinding('hidden')\r\n  public get hidden(): boolean {\r\n    return !this.selected;\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be transitioned with a given direction.\r\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\r\n   *\r\n   * @param condition A condition variable, deciding if the step can be transitioned\r\n   * @param direction The direction in which this step should be transitioned\r\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\r\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\r\n   */\r\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\r\n                                     ((direction: MovingDirection) => Promise<boolean>) |\r\n                                     boolean,\r\n                                   direction: MovingDirection): Promise<boolean> {\r\n    if (typeof(condition) === typeof(true)) {\r\n      return Promise.resolve(condition as boolean);\r\n    } else if (condition instanceof Function) {\r\n      return Promise.resolve(condition(direction));\r\n    } else {\r\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is entered\r\n   *\r\n   * @param direction The direction in which the step is entered\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is exited\r\n   *\r\n   * @param direction The direction in which the step is exited\r\n   */\r\n  public exit(direction: MovingDirection) {\r\n    this.stepExit.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be entered from the given direction.\r\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be entered\r\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\r\n   */\r\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canEnter, direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be exited into given direction.\r\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be left\r\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\r\n   */\r\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canExit, direction);\r\n  }\r\n}\r\n","/**\r\n * The direction in which a step transition was made\r\n *\r\n * @author Marc Arndt\r\n */\r\n\r\n/**\r\n * This enum contains the different possible moving directions in which a wizard can be traversed\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport enum MovingDirection {\r\n  /**\r\n   * A forward step transition\r\n   */\r\n  Forwards,\r\n  /**\r\n   * A backward step transition\r\n   */\r\n  Backwards,\r\n  /**\r\n   * No step transition was done\r\n   */\r\n  Stay\r\n}\r\n","import {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * An interface describing the basic functionality, which must be provided by a navigation mode.\r\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class NavigationMode {\r\n  constructor(protected wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\r\n   */\r\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\r\n\r\n  /**\r\n   * Tries to transition to the wizard step, as denoted by the given destination index.\r\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\r\n\r\n  /**\r\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns True if the step can be navigated to, false otherwise\r\n   */\r\n  abstract isNavigable(destinationIndex: number): boolean;\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  abstract reset(): void;\r\n\r\n  /**\r\n   * Tries to transition the wizard to the previous step from the `currentStep`\r\n   */\r\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasPreviousStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to transition the wizard to the next step from the `currentStep`\r\n   */\r\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasNextStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\r\n * as long as the current step can be exited in the given direction\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class FreeNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {WizardStep} from './wizard-step.interface';\r\nimport {MovingDirection} from './moving-direction.enum';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * Basic functionality every wizard completion step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardCompletionStep extends WizardStep {\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.completed = true;\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public exit(direction: MovingDirection): void {\r\n    // set this completion step as incomplete\r\n    this.completed = false;\r\n    this.stepExit.emit(direction);\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class SemiStrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\r\n    const destinationStep = (previous: boolean) => {\r\n      if (previous) {\r\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex)\r\n          .every(step => step.completed || step.optional || step.selected);\r\n\r\n        return Promise.resolve(\r\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(destinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  isNavigable(destinationIndex: number): boolean {\r\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\r\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\r\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\r\n        .every(step => step.completed || step.optional || step.selected);\r\n    } else {\r\n      // a \"normal\" step can always be entered\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // the default step is a completion step and the wizard contains more than one step\r\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\r\n      this.wizardState.wizardSteps.length !== 1;\r\n\r\n    if (defaultCompletionStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - all previous steps to the destination step have been completed or are optional\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class StrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all previous steps to the destination step have been completed or are optional\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const allPreviousStepsComplete = (previous: boolean) => {\r\n      if (previous) {\r\n        return Promise.resolve(this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\r\n          .every(step => step.completed || step.optional)\r\n        );\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(allPreviousStepsComplete);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - all steps between the old current step and the destination step are marked as incomplete\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        // set all steps after the destination step to incomplete\r\n        this.wizardState.wizardSteps\r\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\r\n          .forEach(step => step.completed = false);\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\r\n    return destinationIndex < this.wizardState.currentStepIndex;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // at least one step is before the default step, that is not optional\r\n    const illegalDefaultStep = this.wizardState.wizardSteps\r\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\r\n      .some(step => !step.optional);\r\n\r\n    if (illegalDefaultStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n","import {FreeNavigationMode} from './free-navigation-mode';\r\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\r\nimport {StrictNavigationMode} from './strict-navigation-mode';\r\n\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {WizardState} from './wizard-state.model';\r\n\r\n/**\r\n * A factory method used to create [[NavigationMode]] instances\r\n *\r\n * @param navigationMode The name of the to be used navigation mode\r\n * @param wizardState The wizard state of the wizard\r\n * @returns The created [[NavigationMode]]\r\n */\r\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\r\n  switch (navigationMode) {\r\n    case 'free':\r\n      return new FreeNavigationMode(wizardState);\r\n    case 'semi-strict':\r\n      return new SemiStrictNavigationMode(wizardState);\r\n    case 'strict':\r\n    default:\r\n      return new StrictNavigationMode(wizardState);\r\n  }\r\n};\r\n","import {Injectable} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {navigationModeFactory} from './navigation-mode.provider';\r\n\r\n/**\r\n * The internal model/state of a wizard.\r\n * This model contains:\r\n * - an array with all steps the wizard contains\r\n * - the index of the step the wizard currently resides inside\r\n * - information about the completeness of the wizard\r\n * - some additional helper methods\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Injectable()\r\nexport class WizardState {\r\n  /**\r\n   * The initial step index, as taken from the [[WizardComponent]]\r\n   */\r\n  private _defaultStepIndex = 0;\r\n\r\n  /**\r\n   * An array representation of all wizard steps belonging to this model\r\n   */\r\n  public wizardSteps: Array<WizardStep> = [];\r\n\r\n  /**\r\n   * Sets the initial default step.\r\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\r\n   *\r\n   * @param defaultStepIndex The new default wizard step index\r\n   */\r\n  public set defaultStepIndex(defaultStepIndex) {\r\n    this._defaultStepIndex = defaultStepIndex;\r\n  }\r\n\r\n  /**\r\n   * The initial step index.\r\n   * This value can be either:\r\n   * - the index of a wizard step with a `selected` directive, or\r\n   * - the default step index, set in the [[WizardComponent]]\r\n   */\r\n  public get defaultStepIndex(): number {\r\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\r\n\r\n    if (foundDefaultStep) {\r\n      return this.getIndexOfStep(foundDefaultStep);\r\n    } else {\r\n      return this._defaultStepIndex;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\r\n   * If this wizard contains no steps, currentStepIndex is -1\r\n   */\r\n  public currentStepIndex = -1;\r\n\r\n  /**\r\n   * The navigation mode used to navigate inside the wizard\r\n   */\r\n  public navigationMode: NavigationMode;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  public disableNavigationBar: boolean;\r\n\r\n  /**\r\n   * The WizardStep object belonging to the currently visible and selected step.\r\n   * The currentStep is always the currently selected wizard step.\r\n   * The currentStep can be either completed, if it was visited earlier,\r\n   * or not completed, if it is visited for the first time or its state is currently out of date.\r\n   *\r\n   * If this wizard contains no steps, currentStep is null\r\n   */\r\n  public get currentStep(): WizardStep {\r\n    if (this.hasStep(this.currentStepIndex)) {\r\n      return this.wizardSteps[this.currentStepIndex];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The completeness of the wizard.\r\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\r\n   */\r\n  public get completed(): boolean {\r\n    return this.wizardSteps.every(step => step.completed || step.optional);\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * Updates the navigation mode to the navigation mode with the given name\r\n   *\r\n   * @param updatedNavigationMode The name of the new navigation mode\r\n   */\r\n  updateNavigationMode(updatedNavigationMode: string): void {\r\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the wizard steps to the new array\r\n   *\r\n   * @param updatedWizardSteps The updated wizard steps\r\n   */\r\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\r\n    // the wizard is currently not in the initialization phase\r\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\r\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\r\n    }\r\n\r\n    this.wizardSteps = updatedWizardSteps;\r\n  }\r\n\r\n  /**\r\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\r\n   *\r\n   * @param stepIndex The to be checked index of a step inside this wizard\r\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\r\n   */\r\n  hasStep(stepIndex: number): boolean {\r\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a previous step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a previous step before the current step\r\n   */\r\n  hasPreviousStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a next step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a next step after the current step\r\n   */\r\n  hasNextStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard is currently inside its last step\r\n   *\r\n   * @returns True if the wizard is currently inside its last step\r\n   */\r\n  isLastStep(): boolean {\r\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\r\n   * If no [[WizardStep]] exists at the given index an Error is thrown\r\n   *\r\n   * @param stepIndex The given index\r\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\r\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\r\n   */\r\n  getStepAtIndex(stepIndex: number): WizardStep {\r\n    if (!this.hasStep(stepIndex)) {\r\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\r\n    }\r\n\r\n    return this.wizardSteps[stepIndex];\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the step with the given `stepId`.\r\n   * If no step with the given `stepId` exists, `-1` is returned\r\n   *\r\n   * @param stepId The given step id\r\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\r\n   */\r\n  getIndexOfStepWithId(stepId: string): number {\r\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the given [[WizardStep]] `step`.\r\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\r\n   *\r\n   * @param step The given [[WizardStep]]\r\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\r\n   */\r\n  getIndexOfStep(step: WizardStep): number {\r\n    return this.wizardSteps.indexOf(step);\r\n  }\r\n\r\n  /**\r\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\r\n   *\r\n   * @param destinationStep The given destination step\r\n   * @returns The calculated [[MovingDirection]]\r\n   */\r\n  getMovingDirection(destinationStep: number): MovingDirection {\r\n    let movingDirection: MovingDirection;\r\n\r\n    if (destinationStep > this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Forwards;\r\n    } else if (destinationStep < this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Backwards;\r\n    } else {\r\n      movingDirection = MovingDirection.Stay;\r\n    }\r\n\r\n    return movingDirection;\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard` component defines the root component of a wizard.\r\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\r\n * of its navigation bar.\r\n *\r\n * ### Syntax\r\n * ```html\r\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\r\n *     ...\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * Without completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * With completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard',\r\n  templateUrl: 'wizard.component.html',\r\n  styleUrls: ['wizard.component.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [WizardState]\r\n})\r\nexport class WizardComponent implements OnChanges, AfterContentInit {\r\n  /**\r\n   * A QueryList containing all [[WizardStep]]s inside this wizard\r\n   */\r\n  @ContentChildren(WizardStep)\r\n  public wizardSteps: QueryList<WizardStep>;\r\n\r\n  /**\r\n   * The location of the navigation bar inside the wizard.\r\n   * This location can be either top, bottom, left or right\r\n   */\r\n  @Input()\r\n  public navBarLocation = 'top';\r\n\r\n  /**\r\n   * The layout of the navigation bar inside the wizard.\r\n   * The layout can be either small, large-filled, large-empty or large-symbols\r\n   */\r\n  @Input()\r\n  public navBarLayout = 'small';\r\n\r\n  /**\r\n   * The direction in which the steps inside the navigation bar should be shown.\r\n   * The direction can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public navBarDirection = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode used for transitioning between different steps.\r\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\r\n   */\r\n  @Input()\r\n  public navigationMode = 'strict';\r\n\r\n  /**\r\n   * The initially selected step, represented by its index\r\n   */\r\n  @Input()\r\n  public defaultStepIndex = 0;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  @Input()\r\n  public disableNavigationBar = false;\r\n\r\n  /**\r\n   * Returns true if this wizard uses a horizontal orientation.\r\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\r\n   *\r\n   * @returns True if this wizard uses a horizontal orientation\r\n   */\r\n  @HostBinding('class.horizontal')\r\n  public get horizontalOrientation(): boolean {\r\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\r\n  }\r\n\r\n  /**\r\n   * Returns true if this wizard uses a vertical orientation.\r\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\r\n   *\r\n   * @returns True if this wizard uses a vertical orientation\r\n   */\r\n  @HostBinding('class.vertical')\r\n  public get verticalOrientation(): boolean {\r\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\r\n  }\r\n\r\n  /**\r\n   * The navigation mode for this wizard\r\n   */\r\n  public get navigation(): NavigationMode {\r\n    return this.model.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param model The model for this wizard component\r\n   */\r\n  constructor(public model: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Updates the model after certain input values have changed\r\n   *\r\n   * @param changes The detected changes\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (const propName of Object.keys(changes)) {\r\n      let change = changes[propName];\r\n\r\n      if (!change.firstChange) {\r\n        switch (propName) {\r\n          case 'defaultStepIndex':\r\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\r\n            break;\r\n          case 'disableNavigationBar':\r\n            this.model.disableNavigationBar = change.currentValue;\r\n            break;\r\n          case 'navigationMode':\r\n            this.model.updateNavigationMode(change.currentValue);\r\n            break;\r\n          /* istanbul ignore next */\r\n          default:\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngAfterContentInit(): void {\r\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\r\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\r\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\r\n    });\r\n\r\n    // initialize the model\r\n    this.model.disableNavigationBar = this.disableNavigationBar;\r\n    this.model.defaultStepIndex = this.defaultStepIndex;\r\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\r\n    this.model.updateNavigationMode(this.navigationMode);\r\n\r\n    // finally reset the whole wizard state\r\n    this.navigation.reset();\r\n  }\r\n}\r\n","/**\r\n * Created by marc on 20.05.17.\r\n */\r\n\r\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\r\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-completion-step',\r\n  templateUrl: 'wizard-completion-step.component.html',\r\n  styleUrls: ['wizard-completion-step.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\r\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\r\n  ]\r\n})\r\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\r\n}\r\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\r\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\r\n * otherwise it will look like a normal `ul` component.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-navigation-bar',\r\n  templateUrl: 'wizard-navigation-bar.component.html',\r\n  styleUrls: ['wizard-navigation-bar.component.horizontal.less', 'wizard-navigation-bar.component.vertical.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class WizardNavigationBarComponent {\r\n  /**\r\n   * The direction in which the wizard steps should be shown in the navigation bar.\r\n   * This value can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public direction = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  public get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state the wizard currently resides in\r\n   */\r\n  constructor(public wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Returns all [[WizardStep]]s contained in the wizard\r\n   *\r\n   * @returns An array containing all [[WizardStep]]s\r\n   */\r\n  get wizardSteps(): Array<WizardStep> {\r\n    switch (this.direction) {\r\n      case 'right-to-left':\r\n        return this.wizardState.wizardSteps.slice().reverse();\r\n      case 'left-to-right':\r\n      default:\r\n        return this.wizardState.wizardSteps;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\r\n   *\r\n   * @returns The number of wizard steps to be displayed\r\n   */\r\n  get numberOfWizardSteps(): number {\r\n    return this.wizardState.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as current\r\n   */\r\n  public isCurrent(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as done\r\n   */\r\n  public isDone(wizardStep: WizardStep): boolean {\r\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as default\r\n   */\r\n  public isDefault(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as editing\r\n   */\r\n  public isEditing(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as optional\r\n   */\r\n  public isOptional(wizardStep: WizardStep): boolean {\r\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\r\n   * A wizard step can be navigated to if:\r\n   * - the step is currently not selected\r\n   * - the navigation bar isn't disabled\r\n   * - the navigation mode allows navigation to the step\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as navigable\r\n   */\r\n  public isNavigable(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\r\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\r\n  }\r\n}\r\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <aw-wizard-step\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        symbol\r\n *    </ng-template>\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <aw-wizard-step>\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        <i class=\"fa fa-taxi\"></i>\r\n *    </ng-template>\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-step',\r\n  templateUrl: 'wizard-step.component.html',\r\n  styleUrls: ['wizard-step.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\r\n  ]\r\n})\r\nexport class WizardStepComponent extends WizardStep {\r\n}\r\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awEnableBackLinks]'\r\n})\r\nexport class EnableBackLinksDirective implements OnInit {\r\n  /**\r\n   * This EventEmitter is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param completionStep The wizard completion step, which should be exitable\r\n   */\r\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.completionStep.canExit = true;\r\n    this.completionStep.stepExit = this.stepExit;\r\n  }\r\n}\r\n","/**\r\n * An offset between two steps.\r\n * This offset can be either positive or negative.\r\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\r\n * that the offset step is ahead of the other step.\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepOffset {\r\n  /**\r\n   * The offset to the destination step\r\n   */\r\n  stepOffset: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepOffset]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepOffset]] and false otherwise\r\n */\r\nexport function isStepOffset(value: any): value is StepOffset {\r\n  return value.hasOwnProperty('stepOffset');\r\n}\r\n","import {WizardStep} from './wizard-step.interface';\r\n\r\n/**\r\n * An unique identifier of a wizard step\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepId {\r\n  /**\r\n   * The id of the destination step\r\n   */\r\n  stepId: string\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepId]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepId]] and false otherwise\r\n */\r\nexport function isStepId(value: any): value is StepId {\r\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\r\n}\r\n","/**\r\n * An index of a wizard step.\r\n * This index is the index of the step inside the wizard.\r\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepIndex {\r\n  /**\r\n   * The index of the destination step\r\n   */\r\n  stepIndex: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepIndex]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepIndex]] and false otherwise\r\n */\r\nexport function isStepIndex(value: any): value is StepIndex {\r\n  return value.hasOwnProperty('stepIndex');\r\n}\r\n","/**\r\n * Created by marc on 09.01.17.\r\n */\r\n\r\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\r\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {isStepId, StepId} from '../util/step-id.interface';\r\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\r\n\r\n/**\r\n * The `awGoToStep` directive can be used to navigate to a given step.\r\n * This step can be defined in one of multiple formats\r\n *\r\n * ### Syntax\r\n *\r\n * With absolute step index:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With unique step id:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With a wizard step object:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With an offset to the defining step:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awGoToStep]'\r\n})\r\nexport class GoToStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\r\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\r\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\r\n   * or a step index as a number or string\r\n   */\r\n    // tslint:disable-next-line:no-input-rename\r\n  @Input('awGoToStep')\r\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\r\n   */\r\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Returns the destination step of this directive as an absolute step index inside the wizard\r\n   *\r\n   * @returns The index of the destination step\r\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\r\n   */\r\n  get destinationStep(): number {\r\n    let destinationStep: number;\r\n\r\n    if (isStepIndex(this.targetStep)) {\r\n      destinationStep = this.targetStep.stepIndex;\r\n    } else if (isStepId(this.targetStep)) {\r\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\r\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\r\n    } else if (this.targetStep instanceof WizardStep) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\r\n    } else {\r\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\r\n    }\r\n\r\n    return destinationStep;\r\n  }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the `destinationStep`\r\n   */\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: Event): void {\r\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awNextStep` directive can be used to navigate to the next step.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awNextStep (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awNextStep]'\r\n})\r\nexport class NextStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the next step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\r\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awOptionalStep]'\r\n})\r\nexport class OptionalStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.optional = true;\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awPreviousStep` directive can be used to navigate to the previous step.\r\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awPreviousStep>...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awPreviousStep]'\r\n})\r\nexport class PreviousStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the previous step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\r\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awResetWizard]'\r\n})\r\nexport class ResetWizardDirective {\r\n  /**\r\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\r\n   */\r\n  @Output()\r\n  public finalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Resets the wizard\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    // do some optional cleanup work\r\n    this.finalize.emit();\r\n    // reset the wizard to its initial state\r\n    this.navigationMode.reset();\r\n  }\r\n}\r\n","import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awSelectedStep]'\r\n})\r\nexport class SelectedStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which should be selected by default\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.defaultSelected = true;\r\n  }\r\n}\r\n","import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\r\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardCompletionStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\r\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\r\n  ]\r\n})\r\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\r\n}\r\n","import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        symbol\r\n *    </ng-template>\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` and `navigationSymbol` inputs:\r\n *\r\n * ```html\r\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\r\n *\r\n * ```html\r\n * <div awWizardStep>\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n *    <ng-template awWizardStepSymbol>\r\n *        <i class=\"fa fa-taxi\"></i>\r\n *    </ng-template>\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\r\n  ]\r\n})\r\nexport class WizardStepDirective extends WizardStep {\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\n\r\nimport {WizardComponent} from './components/wizard.component';\r\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\r\nimport {WizardStepComponent} from './components/wizard-step.component';\r\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\r\n\r\nimport {NextStepDirective} from './directives/next-step.directive';\r\nimport {PreviousStepDirective} from './directives/previous-step.directive';\r\nimport {OptionalStepDirective} from './directives/optional-step.directive';\r\nimport {GoToStepDirective} from './directives/go-to-step.directive';\r\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\r\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\r\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\r\nimport {WizardStepDirective} from './directives/wizard-step.directive';\r\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\r\nimport {SelectedStepDirective} from './directives/selected-step.directive';\r\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\r\n\r\n/**\r\n * The module defining all the content inside `angular-archwizard`\r\n *\r\n * @author Marc Arndt\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepSymbolDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepSymbolDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ]\r\n})\r\nexport class ArchwizardModule {\r\n  /* istanbul ignore next */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: ArchwizardModule, providers: []};\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
